# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dataframe_pb2 as dataframe__pb2


class ProcessingServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addTransaction = channel.unary_unary(
                '/ProcessingServices/addTransaction',
                request_serializer=dataframe__pb2.Transaction.SerializeToString,
                response_deserializer=dataframe__pb2.GenericResponse.FromString,
                _registered_method=True)
        self.transactionsInfo = channel.unary_unary(
                '/ProcessingServices/transactionsInfo',
                request_serializer=dataframe__pb2.GenericInput.SerializeToString,
                response_deserializer=dataframe__pb2.Summary.FromString,
                _registered_method=True)
        self.abnormalTransactions = channel.unary_unary(
                '/ProcessingServices/abnormalTransactions',
                request_serializer=dataframe__pb2.GenericInput.SerializeToString,
                response_deserializer=dataframe__pb2.Abnormal.FromString,
                _registered_method=True)
        self.accountClass = channel.unary_unary(
                '/ProcessingServices/accountClass',
                request_serializer=dataframe__pb2.AccountId.SerializeToString,
                response_deserializer=dataframe__pb2.Class.FromString,
                _registered_method=True)
        self.accountByClass = channel.unary_unary(
                '/ProcessingServices/accountByClass',
                request_serializer=dataframe__pb2.Class.SerializeToString,
                response_deserializer=dataframe__pb2.NumberOfAccounts.FromString,
                _registered_method=True)


class ProcessingServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transactionsInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abnormalTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def accountClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def accountByClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessingServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.addTransaction,
                    request_deserializer=dataframe__pb2.Transaction.FromString,
                    response_serializer=dataframe__pb2.GenericResponse.SerializeToString,
            ),
            'transactionsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.transactionsInfo,
                    request_deserializer=dataframe__pb2.GenericInput.FromString,
                    response_serializer=dataframe__pb2.Summary.SerializeToString,
            ),
            'abnormalTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.abnormalTransactions,
                    request_deserializer=dataframe__pb2.GenericInput.FromString,
                    response_serializer=dataframe__pb2.Abnormal.SerializeToString,
            ),
            'accountClass': grpc.unary_unary_rpc_method_handler(
                    servicer.accountClass,
                    request_deserializer=dataframe__pb2.AccountId.FromString,
                    response_serializer=dataframe__pb2.Class.SerializeToString,
            ),
            'accountByClass': grpc.unary_unary_rpc_method_handler(
                    servicer.accountByClass,
                    request_deserializer=dataframe__pb2.Class.FromString,
                    response_serializer=dataframe__pb2.NumberOfAccounts.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ProcessingServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ProcessingServices', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProcessingServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProcessingServices/addTransaction',
            dataframe__pb2.Transaction.SerializeToString,
            dataframe__pb2.GenericResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def transactionsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProcessingServices/transactionsInfo',
            dataframe__pb2.GenericInput.SerializeToString,
            dataframe__pb2.Summary.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def abnormalTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProcessingServices/abnormalTransactions',
            dataframe__pb2.GenericInput.SerializeToString,
            dataframe__pb2.Abnormal.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def accountClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProcessingServices/accountClass',
            dataframe__pb2.AccountId.SerializeToString,
            dataframe__pb2.Class.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def accountByClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ProcessingServices/accountByClass',
            dataframe__pb2.Class.SerializeToString,
            dataframe__pb2.NumberOfAccounts.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
