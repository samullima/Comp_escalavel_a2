syntax = "proto3";

package dataframe;

service DataFrameService {
  rpc ClassifyAccountsParallel(ClassifyAccountsRequest) returns (DataFrameResponse);
  rpc SummaryStats(SummaryStatsRequest) returns (DataFrameResponse);
  rpc Top10CidadesTransacoes(Top10CidadesRequest) returns (DataFrameResponse);
  rpc AbnormalTransactions(AbnormalTransactionsRequest) returns (DataFrameResponse);
}

// Representa o tipo genérico ElementType (variant<int, float, bool, string>)
message Element {
  oneof value {
    int32 int_val = 1;
    float float_val = 2;
    bool bool_val = 3;
    string string_val = 4;
  }
}

// Representa uma coluna com metadados e dados
message Column {
  string name = 1;
  string type = 2; // Ex: "int", "float", "bool", "string"
  repeated Element values = 3;
}

// Estrutura completa do DataFrame
message DataFrame {
  int32 numRecords = 1;
  int32 numCols = 2;
  repeated Column columns = 3;
}

// Resposta com DataFrame
message DataFrameResponse {
  DataFrame df = 1;
}

// Requisições dos métodos
message ClassifyAccountsRequest {
  DataFrame df = 1;
  int32 id = 2;
  int32 numThreads = 3;
  string idCol = 4;
  string classFirst = 5;
  string classSec = 6;
}

message SummaryStatsRequest {
  DataFrame df = 1;
  int32 id = 2;
  int32 numThreads = 3;
  string colName = 4;
}

message Top10CidadesRequest {
  DataFrame df = 1;
  int32 id = 2;
  int32 numThreads = 3;
  string colName = 4;
}

message AbnormalTransactionsRequest {
  DataFrame dfTransac = 1;
  DataFrame dfAccount = 2;
  int32 id = 3;
  int32 numThreads = 4;
  string transactionIDCol = 5;
  string amountCol = 6;
  string locationColTransac = 7;
  string accountColTransac = 8;
  string accountColAccount = 9;
  string locationColAccount = 10;
}
